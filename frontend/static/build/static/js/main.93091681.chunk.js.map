{"version":3,"sources":["components/SignUp.js","components/LogIn.js","components/GroupList.js","containers/App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","SignUp","props","state","username","email","password1","password2","handleSubmit","bind","handleChange","e","preventDefault","post","this","then","res","console","log","localStorage","setItem","JSON","stringify","data","history","push","catch","error","setState","target","name","value","className","Form","onSubmit","Group","Label","Control","type","onChange","placeholder","required","Text","password","Button","Component","LogIn","window","location","reload","controlId","href","to","GroupList","groups","title","description","image","preview","is_public","get","result","map","group","key","id","src","alt","Home","logOut","Boolean","hostname","match","ReactDOM","render","Nav","defaultActiveKey","Item","Link","onClick","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93091681.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL\n\nclass SignUp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password1: '',\n      password2: '',\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    axios.post('api/v1//rest-auth/registration/', this.state)\n    .then(res => {\n        console.log('two', res)\n        localStorage.setItem('my-app-user', JSON.stringify(res.data));\n        this.props.history.push('/');\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n    console.log('props', this.props)\n    return  (\n        <div className=\"d-flex create-profile-container\">\n            <Form className=\"profile-form\" onSubmit={this.handleSubmit}>\n                <h2 className=\"form-title d-flex justify-content-center\"><span>Sign Up</span></h2>\n                <Form.Group>\n                    <Form.Label className=\"Form-label\">Username:</Form.Label>\n                    <Form.Control  type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} placeholder='Enter username' required />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label className=\"Form-label\">Email:</Form.Label>\n                    <Form.Control  type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder='Enter email' required />\n                    <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label className=\"Form-label\">Password:</Form.Label>\n                    <Form.Control  type=\"password\" name=\"password1\" value={this.state.password1} onChange={this.handleChange} placeholder='Enter password' required />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label className=\"Form-label\"> Confirm Password:</Form.Label>\n                    <Form.Control  type=\"password\" name=\"password2\" value={this.state.password} onChange={this.handleChange} placeholder='Enter password' required />\n                </Form.Group>\n                <Button className=\"login-Btn\" type='submit'>Sign Up</Button>\n            </Form>\n      </div>\n    )\n  }\n}\n\nexport default SignUp;","import React, {Component} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport axios from \"axios\";\n// import Header from \"./Header\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL\n\nclass LogIn extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    axios.post('api/v1/rest-auth/login/', this.state)\n    .then(res => {\n        console.log('one', res)\n        localStorage.setItem('my-app-user', JSON.stringify(res.data));\n        this.props.history.push('/');\n        window.location.reload(false);\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n\n\n    return  (\n            <div className=\"d-flex create-profile-container\">\n                <Form className=\"profile-form\" onSubmit={this.handleSubmit}>\n                    <h2 className=\"form-title d-flex justify-content-center\">Login</h2>\n                    <Form.Group >\n                        <Form.Label className=\"Form-label\">Username:</Form.Label>\n                        <Form.Control type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} placeholder='Enter username' required />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicEmail\" >\n                        <Form.Label className=\"Form-label\">Email:</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder='Enter email' required />\n                        <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label className=\"Form-label\">Password:</Form.Label>\n                        <Form.Control type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder='Enter password' required />\n                        <Form.Text className=\"text-muted\" >\n                        Don't have an acount? <a  href=\"/signup/\"><span className=\"login-Btn SignUp-btn\">Click here to Sign up.</span></a>\n                        </Form.Text>\n                    </Form.Group>\n                    <Button to=\"/\" className=\"login-Btn\" type=\"submit\">Login</Button>\n                </Form>\n            </div>\n    )\n  }\n}\n\nexport default LogIn;","import React, {Component} from 'react';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass GroupList extends Component {\n    constructor(props) {\n        super(props);\n            this.state = {\n                groups: [],\n                title: '',\n                description: '',\n                image: null,\n                preview: null,\n                is_public: true,\n            }\n    }\n\n    componentDidMount() {\n        axios.get(\"/api/v1/\")\n        .then(result => {\n            this.setState({groups: result.data})\n            console.log('success');\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>I am the List App</h1>\n                <ul>\n                    {this.props.groups.map(group => {\n                        return <li className=\"card mt-5\" key={group.id}>\n                                <img src={group.image} className=\"card-img-top\" alt=\"Uploaded Photo\"></img>\n                                <div className=\"card-body\">\n                                    <h2 className=\"card-title\">{group.title}</h2>\n                                    <p className=\"card-text\">{group.description}</p>\n                                </div>\n                            </li>;\n                        })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default GroupList","import React, {Component} from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport SignUp from '../components/SignUp.js'\nimport LogIn from '../components/LogIn.js'\nimport GroupList from '../components/GroupList.js'\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\n// import axios from 'axios'\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//       this.state = {\n//         beers: []\n\n//       }\n//   }\n\n//   componentDidMount() {\n    \n//   }\n  \n//   render() {\n    \n//     return (\n//       <div className=\"App\">\n\n//       <SignUp />\n//       <LogIn />\n        \n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Nav defaultActiveKey=\"/home\">\n          <Nav.Item className='span'>\n            <Nav.Link href =\"/\" className=\"nav-link\">Home</Nav.Link>\n          </Nav.Item>\n\n          <Nav.Item>\n            <Nav.Link href =\"/SignUp\" className=\"nav-link\">Sign Up</Nav.Link>\n          </Nav.Item>\n\n          <Nav.Item>\n            <Nav.Link href =\"/Login\" className=\"nav-link\">Log In</Nav.Link>\n          </Nav.Item>\n\n          <Nav.Item>\n            <Nav.Link onClick={logOut} className=\"nav-link\">Log Out</Nav.Link>\n          </Nav.Item>\n\n          <Nav.Item>\n            <Nav.Link href =\"/GroupList\"className=\"nav-link\">Collections</Nav.Link>\n          </Nav.Item>\n        </Nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n        <Route path=\"/GroupList\">\n            <GroupList />\n          </Route>\n          <Route path=\"/LogIn\">\n            <LogIn />\n          </Route>\n          <Route path=\"/SignUp\">\n            <SignUp />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction logOut() {\n  console.log('You Logged out')\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}